<?php

namespace backend\modules\auth\models\forms;

use common\models\User;
use Yii;
use yii\base\Model;
use yii\helpers\Html;

class UpdateCredentialsForm extends Model
{
    /**
     * @var User
     */
    public $user;

    /**
     * @var string
     */
    public $username;

    /**
     * @var string
     */
    public $email;

    /**
     * @var string
     */
    public $password;

    /**
     * @var string
     */
    public $repeat_password;

    /**
     * @var string
     */
    public $current_password;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->username = $this->user->username;
        $this->email = $this->user->email;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'email', 'current_password'], 'required'],
            [['username', 'email', 'password', 'repeat_password', 'current_password'], 'trim'],
            [['email'], 'email'],
            [
                'username',
                'unique',
                'targetClass' => 'common\models\User',
                'targetAttribute' => 'username',
                'when' => function ($model) {

                    return $model->user->username != $this->username;
                }
            ],
            [
                'email',
                'unique',
                'targetClass' => 'common\models\User',
                'targetAttribute' => 'email',
                'when' => function ($model) {

                    return $model->user->email != $this->email;
                }
            ],
            ['username', 'purgeXSS'],
            ['username', 'string', 'max' => 50],
            //['username', 'match', 'pattern' => Yii::$app->miranda->usernameRegexp, 'message' => Yii::t('miranda/auth', 'The username should contain only Latin letters, numbers and the following characters: "-" and "_".')],
            //['username', 'match', 'not' => true, 'pattern' => Yii::$app->miranda->usernameBlackRegexp, 'message' => Yii::t('miranda/auth', 'Username contains not allowed characters or words.')],
            [['email', 'password', 'repeat_password', 'current_password'], 'string', 'max' => 255],
            [['password', 'repeat_password', 'current_password'], 'string', 'min' => 6],
            ['repeat_password', 'compare', 'compareAttribute' => 'password'],
            ['current_password', 'validateCurrentPassword'],
        ];
    }

    /**
     * Remove possible XSS stuff
     *
     * @param $attribute
     */
    public function purgeXSS($attribute)
    {
        $this->$attribute = Html::encode($this->$attribute);
    }

    public function attributeLabels()
    {
        return [
            'username' => Yii::t('miranda/auth', 'Username'),
            'email' => Yii::t('miranda/auth', 'E-mail'),
            'current_password' => Yii::t('miranda/auth', 'Current password'),
            'password' => Yii::t('miranda/auth', 'Password'),
            'repeat_password' => Yii::t('miranda/auth', 'Repeat password'),
        ];
    }

    /**
     * Validates current password
     */
    public function validateCurrentPassword()
    {
        if (!Yii::$app->miranda->checkAttempts()) {
            $this->addError('current_password', Yii::t('miranda/auth', 'Too many attempts'));
            return false;
        }

        if (!Yii::$app->security->validatePassword($this->current_password, $this->user->password_hash)) {
            $this->addError('current_password', Yii::t('miranda/auth', "Wrong password"));
        }
    }

    /**
     * @param bool $performValidation
     *
     * @return bool
     */
    public function updateCredentials($performValidation = true)
    {
        if ($performValidation AND !$this->validate()) {
            return false;
        }

        $this->user->email = $this->email;
        $this->user->username = $this->username;

        if (!empty($this->password)) {
            $this->user->password = $this->password;
        }

        $this->user->removeConfirmationToken();
        return $this->user->save();
    }
}
