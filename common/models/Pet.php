<?php

namespace common\models;

use common\behaviors\MultilingualBehavior;
use common\models\interfaces\OwnerAccess;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\behaviors\TimestampBehavior;
use common\db\ActiveRecord;
use yii\db\Expression;
use yii\db\QueryBuilder;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use common\models\query\PostQuery;

/**
 * This is the model class for table "post".
 *
 * @property integer $id
 * @property string $slug
 * @property string $view
 * @property string $layout
 * @property integer $category_id
 * @property integer $status
 * @property integer $comment_status
 * @property integer $media_id
 * @property integer $published_at
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 * @property integer $revision
 *
 * @property Media $media
 * @property PostCategory $category
 * @property User $createdBy
 * @property User $updatedBy
 * @property PostLang[] $postLangs
 * @property PostTag[] $tags
 */
class Pet extends ActiveRecord
{

    const STATUS_SOLD = 1;
    const STATUS_NOT_SOLD = 0;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%pet}}';
    }

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init();

    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            \common\behaviors\FrontendCacheFlush::className(),
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => new Expression('NOW()'),
            ],
            BlameableBehavior::className(),
        ];
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['status', 'default', 'value' => self::STATUS_NOT_SOLD],
            [['breed','age','price','status'], 'required'],
            [['created_by', 'updated_by'], 'integer'],
            [['name'], 'string', 'max' => 255],
            ['name', 'filter', 'filter' => function ($value) {

                return ucfirst(trim($value));
            }],
            [['sold_at'], 'date', 'format' => 'php:Y-m-d H:i:s'],
            [['name','created_at', 'updated_at', 'sold_at'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('miranda', 'ID'),
            'status' => Yii::t('miranda', 'Status'),
            'name' => Yii::t('miranda', 'Name'),
            'age' => Yii::t('miranda', 'Age (Months)'),
            'price' => Yii::t('miranda', 'Price'),
            'sold_at' => Yii::t('miranda', 'Sale Date'),
            'breed' => Yii::t('miranda', 'Breed'),
            'created_at' => Yii::t('miranda', 'Created At'),
            'updated_at' => Yii::t('miranda', 'Updated At'),
            'created_by' => Yii::t('miranda', 'Created By'),
            'updated_by' => Yii::t('miranda', 'Updated By'),
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

    }

    public function beforeValidate()
    {


        if(self::className() == Pet::className()){

            $this->status = ((empty($this->sold_at))? self::STATUS_NOT_SOLD : self::STATUS_SOLD);
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     * @return PostQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new PostQuery(get_called_class());
    }

    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }


}
